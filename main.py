import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = ''
SESSIONS = {}

def getId(update: Update): 
    return update.message.chat.id
    
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=
                                   "üëã –û, –ø—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π —Å—á–µ—Ç –≤ –±–∞—Ä–µ, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞. \n"
                                   + "\n üöÄ –ë—É–¥—å –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π. –ì–ª–∞–≤–Ω–æ–µ - –∑–∞–ø–∏—Å—ã–≤–∞–π —Å—é–¥–∞ –≤—Å–µ, —á—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—à—å. –ê —è –≤—Å–µ –ø–æ—Å—á–∏—Ç–∞—é –∑–∞ —Ç–µ–±—è üëå"
                                   + "\n "
                                   + "\n ‚ö†Ô∏è –í–æ—Ç –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:"
                                   + "\n üìî –°–æ–∑–¥–∞–π —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /new. "
                                   + "\n üç∫ –ü–∏—à–∏ –º–Ω–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã–≤–∞–µ—à—å. –ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü–∏–≤–æ 200\" –∏–ª–∏ \"–ü–∏–≤–æ 200.50\" "
                                   + "\n üóí –¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: /pre_bill "
                                   + "\n üèÅ –°–¥–µ–ª–∞–π —Ä–∞—Å—á–µ—Ç –∏ –∑–∞–∫—Ä–æ–π —Å—á–µ—Ç: /bill")

async def new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = getId(update)
    if chat_id in SESSIONS:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üòÖ –†—É–∫–∞ –¥—Ä–æ–≥–Ω—É–ª–∞, –±–æ–µ—Ü? –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /bill")    
    else:
        SESSIONS[chat_id] = list()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚úçÔ∏è –°—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç")

async def bill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = getId(update)
    if chat_id not in SESSIONS:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùóÔ∏è –û—à–∏–±–∫–∞: —Å—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.")
    else:
        bill = SESSIONS[chat_id]
        output = generate_bill_str(chat_id) + "-----\n –ò—Ç–æ–≥–æ: " + str(calculate_bill(chat_id)) + " üí∞." 
        await context.bot.send_message(chat_id=update.effective_chat.id, text=output)
        del SESSIONS[chat_id]
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üèÅ –°—á–µ—Ç –∑–∞–∫—Ä—ã—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ?")

async def pre_bill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = getId(update)
    if chat_id not in SESSIONS:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùóÔ∏è –û—à–∏–±–∫–∞: —Å—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.")
    else:
        output = generate_bill_str(chat_id) + "-----\n –ò—Ç–æ–≥–æ: " + str(calculate_bill(chat_id)) + " üí∞." 
        await context.bot.send_message(chat_id=update.effective_chat.id, text=output)

def generate_bill_str(chat_id):
    bill = SESSIONS[chat_id]
    output = ""
    for row in bill: 
        output = output + row["position"] + " " + str(row["price"]) + "\n"
    return output

def calculate_bill(chat_id):
    bill = SESSIONS[chat_id]
    result = 0
    for row in bill:
        result = result + row["price"]
        
    return result
    
def validate_row(message):
    words = message.split()
    if len(words) < 2:
        raise Exception('Uncorrect length')
    if not isinstance(words[0], str) or not isinstance(words[1], str):
        raise Exception('Uncorrect types')
    price = float(len(words) - 1)
            
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = getId(update)
    if chat_id not in SESSIONS:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="ü§å –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏—é - –µ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /new")
    else:
        msg = update.message.text
        
        try:
            validate_row(update.message.text)
        except Exception as e:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="üòû –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –≤–æ—Ç —Ç–∞–∫: \n\n –ü–∏–≤–æ 200 \n\n –∏–ª–∏ \n\n –ü–∏–≤–æ 200.50")
            return
        msgs = msg.split()
        price = msgs[len(msgs) - 1]
        position = msg.replace(price, "")
        row = {}
        row["position"] = position
        row["price"] = float(price) 
        SESSIONS[getId(update)].append(row)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üëå –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', start))
    application.add_handler(CommandHandler('new', new))
    application.add_handler(CommandHandler('bill', bill))
    application.add_handler(CommandHandler('pre_bill', pre_bill))
    application.add_handler(MessageHandler(filters.ALL, add))
    application.run_polling()